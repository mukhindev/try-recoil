{"version":3,"sources":["state/atoms.ts","state/selectors.ts","components/Todo.tsx","components/Todos.tsx","components/App.tsx","hooks/useDebouncedEffect.ts","reportWebVitals.ts","index.tsx"],"names":["AtomKeys","SelectorKeys","todoState","atom","key","TodoState","default","id","title","completed","indexedTodoState","selector","IndexedTodoState","get","reduce","acc","todo","useStyles","makeStyles","theme","backgroundColor","palette","grey","Todo","onToggle","classes","useRecoilValue","labelId","ListItem","className","role","undefined","dense","button","onClick","ListItemIcon","Checkbox","edge","color","checked","tabIndex","inputProps","disableRipple","ListItemText","primary","ListItemSecondaryAction","IconButton","Delete","Todos","todos","List","map","defaultTheme","createTheme","light","main","dark","contrastText","secondary","app","background","height","display","alignItems","justifyContent","paper","width","maxWidth","breakpoints","values","sm","margin","spacing","flexDirection","completedButtons","alignSelf","completedLabel","paddingTop","paddingLeft","borderTop","divider","App","useRecoilState","setTodos","indexedTodos","useState","uncompletedTodos","setUncompletedTodos","completedTodos","setCompletedTodos","isShowCompleted","SetIsShowCompleted","delay","setDelay","effect","deps","useEffect","handler","setTimeout","clearTimeout","useDebouncedEffect","newUncompletedTodos","filter","newCompletedTodos","handleToggle","index","indexOf","newTodos","JSON","parse","stringify","find","ThemeProvider","Paper","ButtonGroup","Button","disabled","length","Collapse","in","timeout","unmountOnExit","Typography","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9118a0a.chunk.js","sourcesContent":["import { atom } from 'recoil';\nimport { ITodoData } from '../types';\n\n/*\n  Атомы — источник истины приложения (главное состояние)\n*/\n\nenum AtomKeys {\n  TodoState = 'todoState',\n}\n\nexport const todoState = atom({\n  // Уникальный ключ атома\n  key: AtomKeys.TodoState,\n  // Состояние по-умолчанию\n  default: [\n    { id: 1, title: 'Купить молока', completed: false },\n    { id: 2, title: 'Починить кран', completed: false },\n    { id: 3, title: 'Построить дом', completed: false },\n    { id: 4, title: 'Посадить дерево', completed: false },\n    { id: 5, title: 'Выспаться', completed: false },\n  ] as ITodoData[],\n});\n","import { selector } from 'recoil';\nimport { todoState } from './atoms';\nimport { ITodoData } from '../types';\n\n/*\n  Селекторы — производное от атомов состояние\n*/\n\nenum SelectorKeys {\n  IndexedTodoState = 'indexedTodoState',\n}\n\n// Индексация массива todos в объект для удобного выбора по id\n// TODO: Попробовать мемоизировать индексированный объект\nexport const indexedTodoState = selector({\n  // Уникальный ключ селектора\n  key: SelectorKeys.IndexedTodoState,\n  get: ({ get }) => {\n    // Получаем текущее состояние из атома\n    const todos = get(todoState);\n    // Возвращаем производное\n    return todos.reduce((acc, todo) => {\n      acc[todo.id] = todo;\n      return acc;\n    }, {} as Record<string, ITodoData>);\n  },\n});\n","import React from 'react';\nimport {\n  Checkbox,\n  IconButton,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n} from '@material-ui/core';\nimport { Delete as DeleteIcon } from '@material-ui/icons';\nimport { useRecoilValue } from 'recoil';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ITodoData } from '../types';\nimport { indexedTodoState } from '../state';\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    todo: {\n      '&:hover': {\n        backgroundColor: theme.palette.grey,\n      },\n    },\n  };\n});\n\ninterface ITodoProps {\n  todo: ITodoData,\n  onToggle: (id: number, completed: boolean) => void,\n}\n\nconst Todo: React.FC<ITodoProps> = ({ todo, onToggle }) => {\n  const classes = useStyles();\n  const { id, title } = todo;\n  // Получаем селектором задачи в индексированном виде\n  const indexedTodos = useRecoilValue(indexedTodoState);\n  // Получаем свойство completed из соответствующей задачи\n  const { completed } = indexedTodos[id];\n  const labelId = `checkbox-list-label-${id}`;\n\n  const handleToggle = () => {\n    onToggle(id, !completed);\n  };\n\n  return (\n    <ListItem\n      className={classes.todo}\n      key={id}\n      role={undefined}\n      dense\n      button\n      onClick={handleToggle}\n    >\n      <ListItemIcon>\n        <Checkbox\n          edge=\"start\"\n          color=\"primary\"\n          checked={completed}\n          tabIndex={-1}\n          inputProps={{ 'aria-labelledby': labelId }}\n          disableRipple\n        />\n      </ListItemIcon>\n      <ListItemText id={labelId} primary={title} />\n      <ListItemSecondaryAction>\n        <IconButton edge=\"end\" aria-label=\"Удалить задачу\">\n          <DeleteIcon />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport { List } from '@material-ui/core';\nimport { ITodoData } from '../types';\nimport Todo from './Todo';\n\ninterface ITodoProps {\n  todos: ITodoData[],\n  onToggle: (id: number, completed: boolean) => void,\n}\n\nconst Todos: React.FC<ITodoProps> = ({ todos, onToggle }) => {\n  return (\n    <List>\n      {todos.map((todo) => (\n        <Todo\n          key={todo.id}\n          todo={todo}\n          onToggle={onToggle}\n        />\n      ))}\n    </List>\n  );\n};\n\nexport default Todos;\n","import React, { useState } from 'react';\nimport { createTheme, ThemeProvider, makeStyles } from '@material-ui/core/styles';\nimport {\n  Button,\n  ButtonGroup,\n  Collapse,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport {\n  CheckBoxOutlineBlank as UncheckIcon,\n  CheckBox as CheckIcon,\n} from '@material-ui/icons';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { ITodoData } from '../types';\nimport { useDebouncedEffect } from '../hooks';\nimport Todos from './Todos';\nimport { indexedTodoState, todoState } from '../state';\n\nconst defaultTheme = createTheme({\n  palette: {\n    primary: {\n      light: '#63a4ff',\n      main: '#1976d2',\n      dark: '#004ba0',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff6659',\n      main: '#d32f2f',\n      dark: '#9a0007',\n      contrastText: '#fff',\n    },\n  },\n});\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    app: {\n      background: theme.palette.background.default,\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'flex-start',\n      justifyContent: 'center',\n    },\n    paper: {\n      width: '100%',\n      maxWidth: theme.breakpoints.values.sm,\n      margin: theme.spacing(4),\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    completedButtons: {\n      alignSelf: 'center',\n      margin: theme.spacing(2),\n    },\n    completedLabel: {\n      paddingTop: theme.spacing(2),\n      paddingLeft: theme.spacing(2),\n      borderTop: `1px solid ${theme.palette.divider}`,\n    },\n  };\n});\n\n// TODO: Выводить кол-во задач, завершенных и незавершенных\nconst App: React.FC = () => {\n  const classes = useStyles();\n  // Получаем состояние атома и его сеттер.\n  // useRecoilState аналогичен [useRecoilState, useSetRecoilState]\n  const [todos, setTodos] = useRecoilState(todoState);\n  // useRecoilValue, useRecoilState работают и с атомами и с селекторами\n  const indexedTodos = useRecoilValue(indexedTodoState);\n  const [uncompletedTodos, setUncompletedTodos] = useState<ITodoData[]>([]);\n  const [completedTodos, setCompletedTodos] = useState<ITodoData[]>([]);\n  const [isShowCompleted, SetIsShowCompleted] = useState(false);\n  const [delay, setDelay] = useState(0);\n\n  const distribute = () => {\n    const newUncompletedTodos = todos.filter((todo) => !todo.completed);\n    const newCompletedTodos = todos.filter((todo) => todo.completed);\n    setUncompletedTodos(newUncompletedTodos);\n    setCompletedTodos(newCompletedTodos);\n  };\n\n  // Перенос в список выполненных с задержкой\n  useDebouncedEffect(distribute, delay, [todos]);\n\n  const handleToggle = (id: number, completed: boolean) => {\n    const index = todos.indexOf(indexedTodos[id]);\n    const newTodos = JSON.parse(JSON.stringify(todos));\n    newTodos[index].completed = completed;\n    setTodos(newTodos);\n    // Если выполняемая задача в списке невыполненных, установить задержку\n    setDelay(uncompletedTodos.find((todo) => todo.id === newTodos[index].id) ? 2000 : 0);\n  };\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <div className={classes.app}>\n        <Paper className={classes.paper}>\n          <ButtonGroup\n            className={classes.completedButtons}\n            color=\"primary\"\n            aria-label=\"Вид\"\n          >\n            <Button\n              disabled={!completedTodos.length}\n              onClick={() => SetIsShowCompleted(false)}\n            >\n              <UncheckIcon />\n            </Button>\n            <Button\n              disabled={!completedTodos.length}\n              onClick={() => SetIsShowCompleted(true)}\n            >\n              <CheckIcon />\n            </Button>\n          </ButtonGroup>\n          {/* TODO: Выводить сообщение когда все задачи выполнены */}\n          <Todos todos={uncompletedTodos} onToggle={handleToggle} />\n          <Collapse\n            in={isShowCompleted && !!completedTodos.length}\n            timeout=\"auto\"\n            unmountOnExit\n          >\n            <Typography className={classes.completedLabel}>Выполненные</Typography>\n            <Todos todos={completedTodos} onToggle={handleToggle} />\n          </Collapse>\n        </Paper>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { useEffect } from 'react';\n\nexport const useDebouncedEffect = (effect: () => void, delay: number, deps?: unknown[]): void => {\n  useEffect(() => {\n    const handler = setTimeout(effect, delay);\n\n    return () => clearTimeout(handler);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <RecoilRoot>\n    <App />\n  </RecoilRoot>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}